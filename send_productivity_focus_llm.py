#!/usr/bin/env python3
"""
Productivity Focus Rich Message with LLM-Generated Content

This script uses the productivity_focus_01.png template and generates
content using our Azure OpenAI LLM for personalized focus strategies.
"""

import sys
import os
from datetime import datetime

# Add src to path
sys.path.append('/home/runner/workspace/src')

def generate_focus_content_with_llm(openai_service):
    """Generate productivity focus content using LLM"""
    
    # Create a focused prompt for productivity content
    prompt = """Create inspiring productivity and focus content for a LINE message. The content should be:

Theme: Deep work and concentration
Mood: Focused and energetic  
Purpose: Help someone achieve better focus and productivity today

Please provide:
1. A compelling title (max 30 characters, include an emoji)
2. Main inspirational message about focus/productivity (2-3 sentences)
3. One practical focus tip they can implement immediately
4. A motivating call-to-action

Keep it concise, actionable, and inspiring. Focus on deep work, concentration, and achieving goals through better attention management."""

    try:
        # Generate content using our OpenAI service
        response = openai_service.generate_response("productivity_focus_user", prompt)
        
        if response and response.strip():
            return response.strip()
        else:
            # Fallback if LLM doesn't respond
            return None
    except Exception as e:
        print(f"⚠️ LLM generation failed: {str(e)}")
        return None

def parse_llm_content(llm_response):
    """Parse LLM response into structured content"""
    
    if not llm_response:
        return None
    
    # Try to extract title and content from LLM response
    lines = [line.strip() for line in llm_response.split('\n') if line.strip()]
    
    if len(lines) >= 2:
        # First line is usually the title
        title = lines[0]
        # Remove common prefixes
        if title.startswith('Title:') or title.startswith('1.'):
            title = title.split(':', 1)[-1].strip()
            if title.startswith(' '):
                title = title[1:]
        
        # Rest is content
        content = ' '.join(lines[1:])
        
        # Clean up content
        content = content.replace('2.', '').replace('3.', '').replace('4.', '')
        content = content.replace('Main message:', '').replace('Tip:', '').replace('Call-to-action:', '')
        content = content.strip()
        
        return {
            'title': title,
            'content': content
        }
    else:
        # Single block of text - use first sentence as title
        sentences = llm_response.split('.')
        if len(sentences) >= 2:
            return {
                'title': sentences[0].strip() + '.',
                'content': '.'.join(sentences[1:]).strip()
            }
    
    # Fallback - use entire response as content
    return {
        'title': '🎯 Focus Power',
        'content': llm_response
    }

def send_productivity_focus_message(user_id):
    """Send productivity focus message with LLM-generated content"""
    
    print("🎯 PRODUCTIVITY FOCUS RICH MESSAGE WITH LLM")
    print("=" * 45)
    print(f"📱 Target: {user_id}")
    print("🎨 Template: productivity_focus_01.png")
    print("🤖 Content: Generated by Azure OpenAI LLM")
    print()
    
    try:
        # Import services
        from src.services.rich_message_service import RichMessageService
        from src.services.line_service import LineService
        from src.services.openai_service import OpenAIService
        from src.services.conversation_service import ConversationService
        from src.config.settings import Settings
        
        print("✅ Services imported")
        
        # Initialize services
        settings = Settings()
        conversation_service = ConversationService()
        openai_service = OpenAIService(settings, conversation_service)
        line_service = LineService(settings, openai_service, conversation_service)
        line_bot_api = line_service.line_bot_api
        
        rich_service = RichMessageService(line_bot_api=line_bot_api)
        print("✅ Services ready")
        
        # Check template
        template_path = "/home/runner/workspace/templates/rich_messages/backgrounds/productivity_focus_01.png"
        
        if not os.path.exists(template_path):
            print(f"❌ Template not found: {template_path}")
            return False
        
        file_size = os.path.getsize(template_path)
        print(f"✅ Template found: productivity_focus_01.png ({file_size:,} bytes)")
        
        # Generate content using LLM
        print("🤖 Generating productivity content with Azure OpenAI...")
        llm_response = generate_focus_content_with_llm(openai_service)
        
        if llm_response:
            print("✅ LLM content generated")
            parsed_content = parse_llm_content(llm_response)
            
            if parsed_content:
                title = parsed_content['title']
                content = parsed_content['content']
                print(f"   📝 Title: {title}")
                print(f"   💭 Preview: {content[:80]}...")
            else:
                print("⚠️ Failed to parse LLM content, using fallback")
                title = "🎯 Deep Focus Mode"
                content = llm_response
        else:
            print("⚠️ LLM generation failed, using fallback content")
            title = "🎯 Deep Focus Mode"
            content = "Focus is not about doing more things. It's about doing the right things with complete attention. Eliminate distractions, set clear intentions, and dive deep into your most important work. Your focus is your superpower - use it wisely today!"
        
        # Create Rich Message
        print("✅ Creating Rich Message...")
        
        flex_message = rich_service.create_flex_message(
            title=title,
            content=content,
            image_path=template_path,
            content_id=f"productivity_llm_{int(datetime.now().timestamp())}",
            user_id=user_id,
            include_interactions=True
        )
        
        if not flex_message:
            print("❌ Failed to create Rich Message")
            return False
        
        print("✅ Rich Message created with LLM content")
        
        # Send the message
        print("🔴 SENDING...")
        line_bot_api.push_message(user_id, flex_message)
        print("🎉 Message sent successfully!")
        
        print()
        print("📊 Message Details:")
        print(f"   👤 Sent to: {user_id}")
        print(f"   🎨 Template: productivity_focus_01.png")
        print(f"   🎭 Theme: Focused Productivity")
        print(f"   🤖 Content: Generated by Azure OpenAI LLM")
        print(f"   📱 Interactive: Like, Share, Save, React buttons")
        print(f"   🕒 Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        print("📱 CHECK YOUR LINE APP!")
        print("   🎯 Look for the productivity-focused message")
        print("   🤖 Content created by AI based on focus/productivity themes")
        print("   🔘 Try the interactive buttons:")
        print("      💝 Like - Show appreciation")
        print("      📤 Share - Spread productivity tips")  
        print("      💾 Save - Keep for reference")
        print("      😊 React - Add your response")
        
        # Show the generated content for reference
        print()
        print("🤖 Generated Content:")
        print(f"   Title: {title}")
        print(f"   Content: {content}")
        
        return True
        
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # User ID (keeping confidential)
    user_id = "U595491d702720bc7c90d50618324cac3"
    
    success = send_productivity_focus_message(user_id)
    
    print()
    if success:
        print("🎉 PRODUCTIVITY FOCUS MESSAGE SENT!")
        print("📱 Check your LINE app for the AI-generated productivity message!")
    else:
        print("❌ Send failed")